ext {
    javaeeVersion = '7.0'
    domaVersion = '2.6.1'
    h2Version = '1.4.190'
    flywayVersion = '3.2.1'
    thymeleafVersion = '2.1.4.RELEASE'
    slf4jVersion = '1.6.6'
    superagentVersion = '1.4.0'
    auiVersion = '5.9.5'
    jqueryVersion = '1.8.3'
    markedVersion = '0.3.5'
    junitVersion = '4.12'
    jerseyVersion = '2.22.1'
    assertjVersion = '3.3.0'
    highlightjsVersion = '9.1.0'
    payaraVersion = '4.1.1.161'
}

apply plugin: 'java'
apply plugin: 'war'
apply from: 'eclipse.gradle'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

//Domaはコンパイル時にクラスパス上のSQLファイルを参照するが、
//Gradleはデフォルトだとコンパイル後にリソースコピーが行われる。
//なのでリソースコピーとコンパイルの順番を入れ替える。
compileJava.dependsOn processResources
//また、リソースの出力先がクラスパス上に無いのでコンパイルの
//出力先と同じディレクトリに設定する。
processResources.destinationDir = compileJava.destinationDir

// Gradleと@RunWith(Enclosed.class)なテストクラスの相性がよろしくない。
// staticにネストしたテストクラスを除外して@RunWith(Enclosed.class)の実行だけに絞る。
// http://d.hatena.ne.jp/shuji_w6e/20120808/1344386399
test.exclude '**/*$*'

javadoc {
    options {
        charSet 'UTF-8'
        docEncoding 'UTF-8'
        encoding = 'UTF-8'
        links 'http://docs.oracle.com/javase/jp/8/docs/api/',
              'http://docs.oracle.com/javaee/7/api/'
        //linksOffline "http://static.javadoc.io/org.seasar.doma/doma/${domaVersion}/", 'build'
        use = true
    }
    failOnError = false
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    providedCompile "javax:javaee-api:${javaeeVersion}"
    compile "org.seasar.doma:doma:${domaVersion}"
    compile "com.h2database:h2:${h2Version}"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    compile "org.thymeleaf:thymeleaf:${thymeleafVersion}"
    runtime "org.slf4j:slf4j-jdk14:${slf4jVersion}"
    compile "org.webjars:superagent:${superagentVersion}"
    compile "org.webjars:aui:${auiVersion}"
    compile "org.webjars:jquery:${jqueryVersion}"
    compile "org.webjars.bower:marked:${markedVersion}"
    compile "org.webjars.bower:highlightjs:${highlightjsVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}"
    testCompile "org.glassfish.jersey.ext:jersey-bean-validation:${jerseyVersion}"
    archives "fish.payara.extras:payara-micro:${payaraVersion}"
}

task run(type:Exec) {
    def payaraJar = configurations.archives.find { it.name == "payara-micro-${payaraVersion}.jar" }
    def warFile = war.archivePath
    commandLine 'java', '-Ddb.url=jdbc:h2:file:./build/data', '-jar', "${payaraJar}", '--noCluster', '--deploy', "${warFile}"
}

run.dependsOn war

task h2(type: Exec) {
    def h2Jar = configurations.compile.find { it.name == "h2-${h2Version}.jar" }
    commandLine 'java', '-jar', "${h2Jar}"
}
